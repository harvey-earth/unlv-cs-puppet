<%- | 
  String                                                          $name,

  # common properties
  Optional[Enum['networkd', 'NetworkManager']]                    $renderer = undef,
  Optional[Variant[Enum['true', 'false', 'yes', 'no'], Boolean]]  $dhcp4 = undef,
  Optional[Variant[Enum['true', 'false', 'yes', 'no'], Boolean]]  $dhcp6 = undef,
  Optional[Enum['mac']]                                           $dhcp_identifier = undef,
  Optional[Boolean]                                               $accept_ra = undef,
  Optional[Array[Stdlib::IP::Address]]                            $addresses = undef,
  Optional[Stdlib::IP::Address::V4::Nosubnet]                     $gateway4 = undef,
  Optional[Stdlib::IP::Address::V6::Nosubnet]                     $gateway6 = undef,
  Optional[Struct[{
    search => Array[Stdlib::Fqdn],
    addresses => Array[Stdlib::IP::Address]
  }]]                                                             $nameservers = undef,
  Optional[Stdlib::MAC]                                           $macaddress = undef,
  Optional[Boolean]                                               $optional = undef,
  Optional[Array[Struct[{
    Optional['from']          => Stdlib::IP::Address,
    'to'                      => Variant[Stdlib::IP::Address, Enum['0.0.0.0/0']],
    'via'                     => Stdlib::IP::Address::Nosubnet,
    Optional['on_link']       => Boolean,
    Optional['metric']        => Integer,
    Optional['type']          => Enum['unicast', 'unreachable', 'blackhole', 'prohibited'],
    Optional['scope']         => Enum['global', 'link', 'host'],
    Optional['table']         => Integer,
  }]]]                                                            $routes = undef,
  Optional[Array[Struct[{
    'from'                    => Stdlib::IP::Address,
    'to'                      => Variant[Stdlib::IP::Address, Enum['0.0.0.0/0']],
    Optional[table]           => Integer,
    Optional[priority]        => Integer,
    Optional[fwmark]          => Integer,
    Optional[type_of_service] => Integer,
  }]]]                                                            $routing_policy = undef,

  # bridges specific properties
  Array[String]                                                   $interfaces = undef,
  Optional[Struct[{
    Optional['ageing_time']      => Integer,
    Optional['priority']         => Integer,
    Optional['port_priority']    => Integer,
    Optional['forward_delay']    => Integer,
    Optional['hello_time']        => Integer,
    Optional['max_age']          => Integer,
    Optional['path_cost']        => Integer,
    Optional['stp']              => Boolean,
  }]]                                                             $parameters = undef,

| -%>
    <%= $name %>:
    <%# common properties -%>
    <%- if $renderer { -%>
      renderer: <%= $renderer %>
    <%- } -%>
    <%- unless $dhcp4 =~ Undef { -%>
      dhcp4: <%= $dhcp4 %>
    <%- } -%>
    <%- unless $dhcp6 =~ Undef { -%>
      dhcp6: <%= $dhcp6 %>
    <%- } -%>
    <%- if $dhcp_identifier { -%>
      dhcp-identifier: <%= $dhcp_identifier %>
    <%- } -%>
    <%- unless $accept_ra =~ Undef { -%>
      accept-ra: <%= $accept_ra %>
    <%- } -%>
    <%- if $addresses { -%>
      addresses: 
      <%- $addresses.each |$address| { -%>
        - <%= $address %>
      <%- } -%>
    <%- } -%>
    <%- if $gateway4 { -%>
      gateway4: <%= $gateway4 %>
    <%- } -%>
    <%- if $gateway6 { -%>
      gateway6: <%= $gateway6 %>
    <%- } -%>
    <%- if $nameservers { -%>
      nameservers:
      <%- if $nameservers[search] { -%>
        search: <%= $nameservers[search] %>
      <%- } -%>
      <%- if $nameservers[addresses] { -%>
        addresses:
      <%- $nameservers[addresses].each |$address| { -%>
          - <%= $address %>
      <%- } -%>
      <%- } -%>
    <%- } -%>
    <%- if $macaddress { -%>
      macaddress: <%= $macaddress %>
    <%- } -%>
    <%- if $optional { -%>
      optional: <%= $optional %>
    <%- } -%>
    <%- if $routes { -%>
      routes:
      <%- $routes.each |$route| { -%>
        - to: <%= $route[to] %>
          via: <%= $route[via] %>
          <%- if $route[table] { -%>
          table: <%= $route[table] %>
          <%- } -%>
          <%- unless $route[on_link] =~ Undef { -%>
          on-link: <%= $route[on_link] %>
          <%- } -%>
          <%- if $route[metric] { -%>
          metric: <%= $route[metric] %>
          <%- } -%>
      <%- } -%>
    <%- } -%>
    <%- if $routing_policy { -%>
      routing-policy:
      <%- $routing_policy.each |$policy| { -%>
        - to: <%= $policy[to] %>
          from: <%= $policy[from] %>
          <%- if $policy[table] { -%>
          table: <%= $policy[table] %>
          <%- } -%>
          <%- if $policy[priority] { -%>
          priority: <%= $policy[priority] %>
          <%- } -%>
      <%- } -%>
    <%- } -%>
    <%# bridges specific properties -%>
    <%- if $interfaces { -%>
      interfaces: <%= $interfaces %>
    <%- } -%>
    <%- if $parameters { -%>
      parameters:
        <%- if $parameters[ageing_time] { -%>
        ageing-time: <%= $parameters[ageing_time] %>
        <%- } -%>
        <%- if $parameters[priority] { -%>
        priority: <%= $parameters[priority] %>
        <%- } -%>
        <%- if $parameters[port_priority] { -%>
        port-priority: <%= $parameters[port_priority] %>
        <%- } -%>
        <%- if $parameters[forward_delay] { -%>
        forward-delay: <%= $parameters[forward_delay] %>
        <%- } -%>
        <%- if $parameters[hello_time] { -%>
        hello-time: <%= $parameters[hello_time] %>
        <%- } -%>
        <%- if $parameters[max_age] { -%>
        max-age: <%= $parameters[max_age] %>
        <%- } -%>
        <%- if $parameters[path_cost] { -%>
        path-cost: <%= $parameters[path_cost] %>
        <%- } -%>
        <%- unless $parameters[stp] =~ Undef { -%>
        stp: <%= $parameters[stp] %>
        <%- } -%>
    <%- } -%>
